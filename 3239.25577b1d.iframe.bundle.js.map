{"version":3,"file":"3239.25577b1d.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAyBA;AACA;;;;;;;;;;;;;;;;;;AAkBA;AACA;;AAEA;;;;;;;;AAQA;AACA;AACA;;AAEA","sources":["webpack://react-arcgis-wmws/./node_modules/@arcgis/core/chunks/PointRenderer.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.19/esri/copyright.txt for details.\n*/\nimport{glsl as e}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as i}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Slice as o}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{RgbaFloatEncoding as t}from\"../views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl.js\";import{OutputHighlight as a}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";function r(r){const n=new i,d=0===r.output,c=1===r.output,s=4===r.output;return n.extensions.add(\"GL_OES_standard_derivatives\"),n.include(o,r),n.attributes.add(\"position\",\"vec3\"),n.attributes.add(\"color\",\"vec3\"),n.vertex.uniforms.add(\"uModelViewMatrix\",\"mat4\").add(\"uProjectionMatrix\",\"mat4\").add(\"uScreenMinMaxSize\",\"vec2\").add(\"uPointScale\",\"vec2\").add(\"uClipMin\",\"vec3\").add(\"uClipMax\",\"vec3\"),c?(n.vertex.uniforms.add(\"nearFar\",\"vec2\"),n.varyings.add(\"depth\",\"float\")):4!==r.output&&n.varyings.add(\"vColor\",\"vec3\"),n.vertex.code.add(e`\n    void main(void) {\n      // Move clipped points outside of clipspace\n      if (position.x < uClipMin.x || position.y < uClipMin.y || position.z < uClipMin.z ||\n        position.x > uClipMax.x || position.y > uClipMax.y || position.z > uClipMax.z) {\n        gl_Position = vec4(0.0,0.0,0.0,2.0);\n        gl_PointSize = 0.0;\n        return;\n      }\n\n      if (rejectBySlice(position)) {\n        gl_Position = vec4(0.0,0.0,0.0,2.0);\n        gl_PointSize = 0.0;\n        return;\n      }\n\n      // Position in camera space\n      vec4 camera = uModelViewMatrix * vec4(position, 1.0);\n\n      float pointSize = uPointScale.x;\n      vec4 position = uProjectionMatrix * camera;\n     ${r.drawScreenSize?e`\n      float clampedScreenSize = pointSize;`:e`\n      float pointRadius = 0.5 * pointSize;\n      vec4 cameraOffset = camera + vec4(0.0, pointRadius, 0.0, 0.0);\n      vec4 positionOffset = uProjectionMatrix * cameraOffset;\n      float radius = abs(positionOffset.y - position.y);\n      float viewHeight = uPointScale.y;\n      // screen diameter = (2 * r / w) * (h / 2)\n      float screenPointSize = (radius / position.w) * viewHeight;\n      float clampedScreenSize = clamp(screenPointSize, uScreenMinMaxSize.x, uScreenMinMaxSize.y);\n      // Shift towards camera, to move rendered point out of terrain i.e. to\n      // the camera-facing end of the virtual point when considering it as a\n      // 3D sphere.\n      camera.xyz -= normalize(camera.xyz) * pointRadius * clampedScreenSize / screenPointSize;\n      position = uProjectionMatrix * camera;`}\n\n     gl_PointSize = clampedScreenSize;\n     gl_Position = position;\n\n     ${c?e`depth = (-camera.z - nearFar[0]) / (nearFar[1] - nearFar[0]);`:\"\"}\n     ${d?e`vColor = color;`:\"\"}\n    }\n  `),n.fragment.include(t,r),s&&n.include(a),n.fragment.code.add(e`\n    void main(void) {\n      vec2 vOffset = gl_PointCoord - vec2(0.5, 0.5);\n      float r2 = dot(vOffset, vOffset);\n\n      if (r2 > 0.25) {\n        discard;\n      }\n      ${c?e`gl_FragColor = float2rgba(depth);`:\"\"}\n      ${s?e`outputHighlight();`:\"\"}\n      ${d?e`gl_FragColor = vec4(vColor, 1.0);`:\"\"}\n    }\n  `),n}var n=Object.freeze({__proto__:null,build:r});export{n as P,r as b};\n"],"names":[],"sourceRoot":""}