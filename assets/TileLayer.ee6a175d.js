var e=Object.defineProperty,r=Object.defineProperties,t=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable,o=(r,t,s)=>t in r?e(r,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):r[t]=s,l=(e,r)=>{for(var t in r||(r={}))a.call(r,t)&&o(e,t,r[t]);if(s)for(var t of s(r))i.call(r,t)&&o(e,t,r[t]);return e},n=(e,s)=>r(e,t(s));import{oU as p,oV as c,bd as u,be as h,bc as d,bf as y,cj as f,o$ as v,p1 as g,pr as _,b as m,B as b,bi as S,X as O,af as T,N as w,ar as j,z as P,au as R,hK as U,qk as W,aq as C,F as D,G as I,b3 as L,dU as A,bp as N,bl as k,H as B}from"./vendor.7103ff48.js";import{s as M}from"./ArcGISCachedService.88a6694b.js";import{f as G,y as J,K as q}from"./SublayersOwner.30ea78d2.js";import"./serviceTileInfoProperty.6e3cc1cd.js";import"./TilemapCache.59c5ee62.js";const $=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let V=class extends(p(G(c(u(h(M(J(d(y(f(v(g(_(m)))))))))))))){constructor(...e){super(...e),this.listMode="show",this.isReference=null,this.operationalLayerType="ArcGISTiledMapServiceLayer",this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type="tile",this.url=null}normalizeCtorArgs(e,r){return"string"==typeof e?l({url:e},r):e}load(e){const r=b(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(S).then((()=>this._fetchService(r)))),Promise.resolve(this)}get attributionDataUrl(){var e;const r=null==(e=this.parsedUrl)?void 0:e.path.toLowerCase();return r&&this._getDefaultAttribution(this._getMapName(r))}readSpatialReference(e,r){return(e=e||r.tileInfo&&r.tileInfo.spatialReference)&&O.fromJSON(e)}writeSublayers(e,r,t,s){if(!this.loaded||!e)return;const a=e.slice().reverse().flatten((({sublayers:e})=>e&&e.toArray().reverse())).toArray(),i=[],o=l({writeSublayerStructure:!1},s);a.forEach((e=>{const r=e.write({},o);i.push(r)})),i.some((e=>Object.keys(e).length>1))&&(r.layers=i)}get tileServers(){return this._getDefaultTileServers(this.parsedUrl.path)}castTileServers(e){return Array.isArray(e)?e.map((e=>T(e).path)):null}fetchTile(e,r,t,s={}){const{signal:a}=s,i=this.getTileUrl(e,r,t),o={responseType:"image",signal:a,query:l({},this.refreshParameters)};return w(i,o).then((e=>e.data))}getTileUrl(e,r,t){const s=!this.tilemapCache&&this.supportsBlankTile,a=j(n(l(n(l({},this.parsedUrl.query),{blankTile:!s&&null}),this.customParameters),{token:this.apiKey})),i=this.tileServers;return`${i&&i.length?i[r%i.length]:this.parsedUrl.path}/tile/${e}/${r}/${t}${a?"?"+a:""}`}_fetchService(e){return new Promise(((r,t)=>{if(this.sourceJSON){if(null!=this.sourceJSON.bandCount&&null!=this.sourceJSON.pixelSizeX)throw new P("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");return void r({data:this.sourceJSON})}if(!this.parsedUrl)throw new P("tile-layer:undefined-url","layer's url is not defined");const s=R(this.parsedUrl.path);if(b(s)&&"ImageServer"===s.serverType)throw new P("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");w(this.parsedUrl.path,{query:n(l(l({f:"json"},this.parsedUrl.query),this.customParameters),{token:this.apiKey}),responseType:"json",signal:e}).then(r,t)})).then((r=>{if(r.ssl&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl}),10.1===this.version&&!U(this.url))return this._fetchServerVersion(this.url,e).then((e=>{this.read({currentVersion:e})})).catch((()=>{}))}))}_fetchServerVersion(e,r){if(!W(e))return Promise.reject();const t=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return w(t,{query:n(l({f:"json"},this.customParameters),{token:this.apiKey}),responseType:"json",signal:r}).then((e=>{if(e.data&&e.data.currentVersion)return e.data.currentVersion;throw new P("tile-layer:version-not-available")}))}_getMapName(e){const r=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i);return r&&r[2]}_getDefaultAttribution(e){if(!e)return;let r;e=e.toLowerCase();for(let t=0,s=$.length;t<s;t++)if(r=$[t],r.toLowerCase().indexOf(e)>-1)return C("//static.arcgis.com/attribution/"+r)}_getDefaultTileServers(e){const r=-1!==e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i),t=-1!==e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i);return r||t?[e,e.replace(r?/server\.arcgisonline/i:/services\.arcgisonline/i,r?"services.arcgisonline":"server.arcgisonline")]:[]}get hasOverriddenFetchTile(){return!this.fetchTile.__isDefault__}};D([I({readOnly:!0})],V.prototype,"attributionDataUrl",null),D([I({type:["show","hide","hide-children"]})],V.prototype,"listMode",void 0),D([I({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],V.prototype,"isReference",void 0),D([I({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],V.prototype,"operationalLayerType",void 0),D([I({type:Boolean})],V.prototype,"resampling",void 0),D([I()],V.prototype,"sourceJSON",void 0),D([I({type:O})],V.prototype,"spatialReference",void 0),D([L("spatialReference",["spatialReference","tileInfo"])],V.prototype,"readSpatialReference",null),D([I({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],V.prototype,"path",void 0),D([I({readOnly:!0})],V.prototype,"sublayers",void 0),D([A("sublayers",{layers:{type:[q]}})],V.prototype,"writeSublayers",null),D([I({json:{read:!1,write:!1}})],V.prototype,"popupEnabled",void 0),D([I()],V.prototype,"tileServers",null),D([N("tileServers")],V.prototype,"castTileServers",null),D([I({readOnly:!0,json:{read:!1}})],V.prototype,"type",void 0),D([I(k)],V.prototype,"url",void 0),V=D([B("esri.layers.TileLayer")],V),V.prototype.fetchTile.__isDefault__=!0;var E=V;export{E as default};
//# sourceMappingURL=TileLayer.ee6a175d.js.map
