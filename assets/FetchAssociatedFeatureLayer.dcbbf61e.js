import{M as t,B as r,N as e,ac as a,bi as s,k as n,ax as i,aA as o}from"./vendor.7103ff48.js";class l{constructor(t,r,e,a){this.parsedUrl=t,this.portalItem=r,this.apiKey=e,this.signal=a,this.rootDocument=null;const s=this.parsedUrl.path.match(/^(.*)\/SceneServer\/layers\/([\d]*)\/?$/i);s&&(this.urlParts={root:s[1],layerId:parseInt(s[2],10)})}async fetch(){var r;if(!this.urlParts)return null;const e=null!=(r=this.portalItem)?r:await this.portalItemFromServiceItemId();if(t(e))return this.loadFromUrl();const a=await this.findAndLoadRelatedPortalItem(e);return t(a)?null:this.loadFeatureLayerFromPortalItem(a)}async fetchPortalItem(){var r;if(!this.urlParts)return null;const e=null!=(r=this.portalItem)?r:await this.portalItemFromServiceItemId();return t(e)?null:this.findAndLoadRelatedPortalItem(e)}async fetchRootDocument(){if(r(this.rootDocument))return this.rootDocument;if(t(this.urlParts))return this.rootDocument={},{};const a={query:{f:"json",token:this.apiKey},responseType:"json",signal:this.signal},s=`${this.urlParts.root}/SceneServer`;try{const t=await e(s,a);this.rootDocument=t.data}catch{this.rootDocument={}}return this.rootDocument}async fetchServiceOwningPortalUrl(){var t;const r=null==(t=a)?void 0:t.findServerInfo(this.parsedUrl.path);if(null!=r&&r.owningSystemUrl)return r.owningSystemUrl;const n=this.parsedUrl.path.replace(/(.*\/rest)\/.*/i,"$1")+"/info";try{const t=(await e(n,{query:{f:"json"},responseType:"json",signal:this.signal})).data.owningSystemUrl;if(t)return t}catch(i){s(i)}return null}async findAndLoadRelatedPortalItem(t){try{return(await t.fetchRelatedItems({relationshipType:"Service2Service",direction:"reverse"},{signal:this.signal})).find((t=>"Feature Service"===t.type))||null}catch(r){return s(r),null}}async loadFeatureLayerFromPortalItem(t){await t.load({signal:this.signal});const r=await this.findMatchingAssociatedSublayerUrl(t.url);return new n({url:r,portalItem:t}).load({signal:this.signal})}async loadFromUrl(){const t=await this.findMatchingAssociatedSublayerUrl(`${this.urlParts.root}/FeatureServer`);return new n({url:t}).load({signal:this.signal})}async findMatchingAssociatedSublayerUrl(t){const r=t.replace(/^(.*FeatureServer)(\/[\d]*\/?)?$/i,"$1"),a={query:{f:"json"},responseType:"json",authMode:"no-prompt",signal:this.signal},s=this.urlParts.layerId,n=this.fetchRootDocument(),i=e(r,a),[o,l]=await Promise.all([i,n]),c=l&&l.layers,h=o.data&&o.data.layers;if(!Array.isArray(h))throw new Error("expected layers array");if(Array.isArray(c)){for(let e=0;e<Math.min(c.length,h.length);e++)if(c[e].id===s)return`${r}/${h[e].id}`}else if(s<h.length)return`${r}/${h[s].id}`;throw new Error("could not find matching associated sublayer")}async portalItemFromServiceItemId(){const t=(await this.fetchRootDocument()).serviceItemId;if(!t)return null;const e=new i({id:t,apiKey:this.apiKey}),a=await this.fetchServiceOwningPortalUrl();r(a)&&(e.portal=new o({url:a}));try{return e.load({signal:this.signal})}catch(n){return s(n),null}}}export{l};
//# sourceMappingURL=FetchAssociatedFeatureLayer.dcbbf61e.js.map
