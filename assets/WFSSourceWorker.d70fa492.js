import{bj as e,dv as t,g6 as s,B as r,dE as a,aW as i,e6 as n,a1 as o,z as u,cE as p,bv as h,bb as y}from"./vendor.7103ff48.js";import{m as l}from"./FeatureStore.fa2004d8.js";import{g as c,f as m}from"./projectionSupport.c5c55ada.js";import{H as d}from"./QueryEngine.e60e2d2b.js";import{I as g,k as _}from"./geojson.80421290.js";import{d as f}from"./sourceUtils.24d34e64.js";import{B as E}from"./wfsUtils.b57f2543.js";import"./PooledRBush.78e40fd7.js";import"./optimizedFeatureQueryEngineAdapter.7a815640.js";import"./centroid.f07ef5b9.js";import"./json.62026198.js";import"./WhereClause.fd3015dd.js";import"./QueryEngineCapabilities.47963c2d.js";import"./utils.eaa56ffd.js";import"./spatialQuerySupport.21a81819.js";import"./xmlUtils.ae0e30b2.js";class w{constructor(){this._queryEngine=null,this._customParameters=null,this._snapshotFeatures=async n=>{const{objectIdField:o}=this._queryEngine,u=await E(this._getFeatureUrl,this._featureType.typeName,this._getFeatureOutputFormat,{customParameters:this._customParameters,dateFields:this._queryEngine.fieldsIndex.dateFields.map((e=>e.name)),signal:n});await g(u),e(n);const p=_(u,{geometryType:this._queryEngine.geometryType,hasZ:!1,objectIdField:o});if(!t(this._queryEngine.spatialReference,s))for(const e of p)r(e.geometry)&&(e.geometry=a(c(i(e.geometry,this._queryEngine.geometryType,!1,!1),s,this._queryEngine.spatialReference)));let h=1;for(const e of p){const t={};f(this._fieldsIndex,t,e.attributes,null,!0),e.attributes=t,null==e.attributes[o]&&(e.objectId=e.attributes[o]=h++)}return p}}destroy(){var e;null==(e=this._queryEngine)||e.destroy(),this._queryEngine=null}async load(t,s){const{getFeatureUrl:r,getFeatureOutputFormat:a,spatialReference:i,fields:u,geometryType:p,featureType:h,objectIdField:y,customParameters:c}=t;this._featureType=h,this._customParameters=c,this._getFeatureUrl=r,this._getFeatureOutputFormat=a,this._fieldsIndex=new n(u),await this._checkProjection(i),e(s),this._queryEngine=new d({fields:u,geometryType:p,hasM:!1,hasZ:!1,objectIdField:y,spatialReference:i,timeInfo:null,featureStore:new l({geometryType:p,hasM:!1,hasZ:!1})});const m=await this._snapshotFeatures(o(s.signal));return this._queryEngine.featureStore.addMany(m),{extent:this._queryEngine.fullExtent}}async applyEdits(){throw new u("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}setCustomParameters(e){this._customParameters=e}async refresh(){var e;return null==(e=this._snapshotTask)||e.abort(),this._snapshotTask=p(this._snapshotFeatures),this._snapshotTask.promise.then((e=>{this._queryEngine.featureStore.clear(),e&&this._queryEngine.featureStore.addMany(e)}),(e=>{this._queryEngine.featureStore.clear(),h(e)||y.getLogger("esri.layers.WFSLayer").error(new u("wfs-layer:getfeature-error","An error occurred during the GetFeature request",{error:e}))})),await this._waitSnapshotComplete(),{extent:this._queryEngine.fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _checkProjection(e){try{await m(s,e)}catch{throw new u("unsupported-projection","Projection not supported",{spatialReference:e})}}}export{w as default};
//# sourceMappingURL=WFSSourceWorker.d70fa492.js.map
