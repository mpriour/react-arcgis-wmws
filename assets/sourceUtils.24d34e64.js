import{ho as t,ga as e,hp as n,hq as i,hr as r,d3 as s}from"./vendor.7103ff48.js";class o{constructor(){this.code=null,this.description=null}}class a{constructor(t){this.error=new o,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=t}}function l(t){return new a(t)}class u{constructor(t){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=t}}function c(t){return new u(t)}const f=new Set;function d(t,e,n,s,o=!1,a){f.clear();for(const u in n){const s=t.get(u);if(!s)continue;const c=n[u],d=h(s,c);if(d!==c&&a&&a.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:s,originalValue:c,sanitizedValue:d}}),f.add(s.name),s&&(o||s.editable)){const t=i(s,d);if(t)return l(r(t,s,d));e[s.name]=d}}if(s)for(const i of s)if(!f.has(i.name))return l(`missing required field "${i.name}"`);return null}function h(i,r){let s=r;return"string"==typeof r&&t(i)?s=parseFloat(r):null!=r&&e(i)&&"string"!=typeof r&&(s=String(r)),n(s)}let g;function m(t,e){if(!t||!s(e))return t;if("rings"in t||"paths"in t){if(!g)throw new TypeError("geometry engine not loaded");return g.simplify(e,t)}return t}async function p(t,e){!s(t)||"esriGeometryPolygon"!==e&&"esriGeometryPolyline"!==e||await async function(){return g||(g=await import("./geometryEngineJSON.02a68760.js"),g)}()}export{c,d,m as h,l as u,p as y};
//# sourceMappingURL=sourceUtils.24d34e64.js.map
