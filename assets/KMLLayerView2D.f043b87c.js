var i=Object.defineProperty,e=Object.getOwnPropertySymbols,t=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,a=(e,t,s)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s,l=(i,l)=>{for(var o in l||(l={}))t.call(l,o)&&a(i,o,l[o]);if(e)for(var o of e(l))s.call(l,o)&&a(i,o,l[o]);return i};import{ih as o,br as r,nV as n,A as h,N as p,P as m,dw as d,hS as c,B as y,M as b,j$ as w,i7 as u,X as g,aY as f,al as _,b5 as V,ar as v,F as S,G as j,H as I}from"./vendor.7103ff48.js";import{b as P,g as C,d as x}from"./kmlUtils.b528ded0.js";import{x as k}from"./Bitmap.8c3290a1.js";import{t as M}from"./BitmapContainer.f66ff0c9.js";import{l as U}from"./LayerView2D.3bec42c6.js";import{r as D}from"./GraphicContainer.aef7333c.js";import{e as L}from"./BaseGraphicContainer.8758663f.js";import"./brushes.b64b90a9.js";import"./definitions.e5e12ce7.js";import"./Utils.8f00ae04.js";import"./ShaderCompiler.6905b522.js";import"./GeometryUtils.1bcb906c.js";import"./MaterialKey.8df623c8.js";import"./pixelUtils.5eddfa69.js";import"./WGLContainer.6f073475.js";import"./Container.f525a10f.js";import"./projectionSupport.c5c55ada.js";import"./json.62026198.js";import"./Matcher.4dbcd4b5.js";import"./ComputedAttributeStorage.c6915def.js";import"./FeatureSetReader.bfb25a2d.js";import"./centroid.f07ef5b9.js";import"./visualVariablesUtils.7196204b.js";import"./visualVariablesUtils.f42dea16.js";import"./tileUtils.2adb3da0.js";import"./TileClipper.507f8905.js";import"./schemaUtils.c28cd36f.js";import"./CIMSymbolHelper.da5834c9.js";import"./Rect.db562a93.js";import"./BidiEngine.af5bfcbd.js";import"./MD5.86afbcc5.js";import"./cimAnalyzer.07de9cca.js";import"./FeatureContainer.c8d6e93f.js";import"./TileContainer.555234dd.js";import"./GraphicsView.45ff2c67.js";class A{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let T=class extends(U(o)){constructor(){super(...arguments),this._handles=new r,this._bitmapIndex=new Map,this._mapImageContainer=new M,this._kmlVisualData=new A,this.allVisiblePoints=new n,this.allVisiblePolylines=new n,this.allVisiblePolygons=new n,this.allVisibleMapImages=new h}hitTest(i,e){if(this.suspended||!this._pointsView&&!this._polylinesView&&!this._polygonsView)return Promise.resolve(null);const t=[this._pointsView.hitTest(i,e),this._polylinesView.hitTest(i,e),this._polygonsView.hitTest(i,e)];return Promise.all(t).then((i=>i.filter((i=>(i&&(i.layer=this.layer,i.sourceLayer=this.layer),!!i)))[0]||null))}update(i){this._polygonsView&&this._polygonsView.processUpdate(i),this._polylinesView&&this._polylinesView.processUpdate(i),this._pointsView&&this._pointsView.processUpdate(i)}attach(){this._handles.add([this.allVisibleMapImages.on("change",(i=>{i.added.forEach((i=>this._addMapImage(i))),i.removed.forEach((i=>this._removeMapImage(i)))}))]),this.container.addChild(this._mapImageContainer),this._polygonsView=new L({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new D(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new L({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new D(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new L({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new D(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.watch("layer.visibleSublayers",(i=>{for(const[e,t]of this._kmlVisualData.allSublayers)t.visibility=0;for(const e of i){const i=this._kmlVisualData.allSublayers.get(e.id);i&&(i.visibility=1)}this._refreshCollections()})),this._fetchingPromise=this._fetchService().then((()=>{this._fetchingPromise=null,this.notifyChange("updating")}))}detach(){this._handles.removeAll(),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView&&(this._polygonsView.destroy(),this._polygonsView=null),this._polylinesView&&(this._polylinesView.destroy(),this._polylinesView=null),this._pointsView&&(this._pointsView.destroy(),this._pointsView=null)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return null!=this._fetchingPromise||this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(i){(this.view.spatialReference.isWGS84||this.view.spatialReference.isWebMercator)&&p(i.href,{responseType:"image"}).then((({data:e})=>{let t=m.fromJSON(i.extent);d(t,this.view.spatialReference)&&(t=c(t,this.view.spatialReference));const s=new k(e,"standard");s.x=t.xmin,s.y=t.ymax,s.resolution=t.width/e.naturalWidth,s.rotation=i.rotation,this._mapImageContainer.addChild(s),this._bitmapIndex.set(i,s)}))}async _getViewDependentUrl(i,e){const{viewFormat:t,viewBoundScale:s,httpQuery:a}=i;if(y(t)){if(b(e))throw new Error("Loading this network link requires a view state.");let o;if(await w(),y(s)&&1!==s){const i=new m(e.extent);i.expand(s),o=i}else o=e.extent;o=u(o,g.WGS84);const r=u(o,g.WebMercator),n=o.xmin,h=o.xmax,p=o.ymin,d=o.ymax,c=e.size[0]*e.pixelRatio,S=e.size[1]*e.pixelRatio,j=Math.max(r.width,r.height),I={"[bboxWest]":n.toString(),"[bboxEast]":h.toString(),"[bboxSouth]":p.toString(),"[bboxNorth]":d.toString(),"[lookatLon]":o.center.x.toString(),"[lookatLat]":o.center.y.toString(),"[lookatRange]":j.toString(),"[lookatTilt]":"0","[lookatHeading]":e.rotation.toString(),"[lookatTerrainLon]":o.center.x.toString(),"[lookatTerrainLat]":o.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":o.center.x.toString(),"[cameraLat]":o.center.y.toString(),"[cameraAlt]":j.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":c.toString(),"[vertPixels]":S.toString(),"[terrainEnabled]":"0","[clientVersion]":f,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},P=i=>{for(const e in i)for(const t in I)i[e]=i[e].replace(t,I[t])},C=_(t);P(C);let x={};y(a)&&(x=_(a),P(x));const k=V(i.href);return k.query=l(l(l({},k.query),C),x),`${k.path}?${v(C)}`}return i.href}async _fetchService(){const i=new A;await this._loadVisualData(this.layer.url,i),this._kmlVisualData=i,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter((i=>this._isSublayerVisible(i.sublayerId))).map((({item:i})=>i))),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter((i=>this._isSublayerVisible(i.sublayerId))).map((({item:i})=>i))),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter((i=>this._isSublayerVisible(i.sublayerId))).map((({item:i})=>i))),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter((i=>this._isSublayerVisible(i.sublayerId))).map((({item:i})=>i)))}_isSublayerVisible(i){const e=this._kmlVisualData.allSublayers.get(i);return!!e.visibility&&(-1===e.parentFolderId||this._isSublayerVisible(e.parentFolderId))}_loadVisualData(i,e){return this._fetchParsedKML(i).then((async i=>{for(const t of i.sublayers){e.allSublayers.set(t.id,t);const i=t.points?await P(t.points):[],s=t.polylines?await P(t.polylines):[],a=t.polygons?await P(t.polygons):[],l=t.mapImages||[];if(e.allPoints.push(...i.map((i=>({item:i,sublayerId:t.id})))),e.allPolylines.push(...s.map((i=>({item:i,sublayerId:t.id})))),e.allPolygons.push(...a.map((i=>({item:i,sublayerId:t.id})))),e.allMapImages.push(...l.map((i=>({item:i,sublayerId:t.id})))),t.networkLink){const i=await this._getViewDependentUrl(t.networkLink,this.view.state);await this._loadVisualData(i,e)}}}))}_fetchParsedKML(i){return C(i,this.view.spatialReference,this.layer.refreshInterval).then((i=>x(i.data)))}_removeMapImage(i){const e=this._bitmapIndex.get(i);e&&(this._mapImageContainer.removeChild(e),this._bitmapIndex.delete(i))}};S([j()],T.prototype,"_pointsView",void 0),S([j()],T.prototype,"_polylinesView",void 0),S([j()],T.prototype,"_polygonsView",void 0),S([j()],T.prototype,"_fetchingPromise",void 0),S([j()],T.prototype,"updating",void 0),T=S([I("esri.views.2d.layers.KMLLayerView2D")],T);var R=T;export{R as default};
//# sourceMappingURL=KMLLayerView2D.f043b87c.js.map
