import{F as e,G as s,H as t,bq as l,eJ as i,D as o,B as a,ew as r,eK as n,eL as h,eM as y,M as b,eN as c}from"./vendor.7103ff48.js";const p=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];let g=class extends l{constructor(e){super(e),this.updating=!1,this.enablePolygons=!0,this.enableLabels=!0,this._polygons=new Map,this._labels=new Map,this._enabled=!0}initialize(){this._symbols=p.map((e=>new i({color:[e[0],e[1],e[2],.6],outline:{color:"black",width:1}}))),this.update()}destroy(){this._enabled=!1,this.clear()}get enabled(){return this._enabled}set enabled(e){this._enabled!==e&&(this._enabled=e,this.update())}update(){if(!this._enabled)return void this.clear();const e=this.getTiles(),s=new Array,t=new Set((this._labels.size,this._labels.keys()));e.forEach(((l,i)=>{const p=l.lij.toString();t.delete(p);const g=l.lij[0],d=l.geometry;if(this.enablePolygons&&!this._polygons.has(p)){const e=new o({geometry:d,symbol:this._symbols[g%this._symbols.length]});this._polygons.set(p,e),s.push(e)}if(this.enableLabels){const t=(e=>{if(a(e.label))return e.label;let s=e.lij.toString();return a(e.loadPriority)&&(s+=` (${e.loadPriority})`),s})(l),g=i/(e.length-1),_=c(0,200,g),w=c(20,6,g)/.75,u=a(l.loadPriority)&&l.loadPriority>=e.length,m=new r([_,u?0:_,u?0:_]),v="3d"===this.view.type?()=>new n({verticalOffset:{screenLength:40/.75},callout:{type:"line",color:"white",border:{color:"black"}},symbolLayers:[new h({text:t,halo:{color:"white",size:1/.75},material:{color:m},size:w})]}):()=>new y({text:t,haloColor:"white",haloSize:1/.75,color:m,size:w});if(this._labels.has(p)){const e=this._labels.get(p),s=v();(b(e.symbol)||JSON.stringify(s)!==JSON.stringify(e.symbol))&&(e.symbol=s)}else{const e=new o({geometry:d.extent.center,symbol:v()});this._labels.set(p,e),s.push(e)}}}));const l=new Array;t.forEach((e=>{this._polygons.has(e)&&(l.push(this._polygons.get(e)),this._polygons.delete(e)),this._labels.has(e)&&(l.push(this._labels.get(e)),this._labels.delete(e))})),this.view.graphics.removeMany(l),this.view.graphics.addMany(s)}clear(){this.view.graphics.removeMany(Array.from(this._polygons.values())),this.view.graphics.removeMany(Array.from(this._labels.values())),this._polygons.clear(),this._labels.clear()}};e([s({constructOnly:!0})],g.prototype,"view",void 0),e([s({readOnly:!0})],g.prototype,"updating",void 0),e([s()],g.prototype,"enabled",null),g=e([t("esri.views.support.TileTreeDebugger")],g);export{g as b};
//# sourceMappingURL=TileTreeDebugger.8de61d60.js.map
